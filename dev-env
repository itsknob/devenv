#!/usr/bin/env bash

dry_run="0"

# Where the config is going to be installed TO
if [ -z "$XDG_CONFIG_HOME" ]; then
	echo "no xdg config home"
	echo "using ~/.config as XDG_CONFIG_HOME"
	XDG_CONFIG_HOME=$HOME/.config
fi

# Where the config should be installed FROM
# At this point it should point to the root of this repo
# ~/code/devenv 
# no trailing slash
if [ -z "$DEV_ENV" ]; then
	echo "env var DEV_ENV needs to be present"
	exit 1
fi

if [[ $1 == "--dry" ]]; then
	echo "[[ DRY RUN ]]"
	dry_run="1"
fi

log() {
	if [[ $dry_run == "1" ]]; then
		echo "[DRY_RUN]: $1"
	else
		echo "$1"
	fi
}

log "----------- $DEV_ENV -----------"

update_files() {
    log "Updating Files"
	log "  source:    $1"
    log "  dest:      $2"
	# change to given directory
	pushd $1 &> /dev/null
	(
		# find directories in the $1 path
		configs=`find . -mindepth 1 -maxdepth 1 -type d`
		for c in $configs; do
			# Bash Wizardry for found path
			destination=${2%/}/${c#./}
            
            # If destionation is a directory delete it.
            if [[ -d $destination ]]; then
                # Remove old Directory
                log "  Removing Old Dir (found)"
                log "    target:  $destination"
                if [[ $dry_run == "0" ]]; then
                    rm -rf $destination
                fi
            fi

			# Copy new one over to old place
			log "  Copying Directory"
            log "    source: $1"
            log "    dest:   $2"
			if [[ $dry_run == "0" ]]; then
				cp -r ./$c $2
			fi
		done
	)
	# return to previous directory
	popd &> /dev/null
}

copy() {
    log "copy $1 $2"
	# Remove Old
	log "removing: $2"
	if [[ $dry_run == "0" ]]; then
		rm $2
	fi

	# Copy New to old location
	log "copying: $1 to $2"
	if [[ $dry_run == "0" ]]; then
		cp $1 $2
	fi
}

copy_dir() {
    from=$1
    to=$2

    # | are put stdout and put it into next stdin
    # > are redirects
    pushd $from > /dev/null # Redirect to /dev/null
    dirs=$(find . -mindepth 1 -maxdepth 1 -type d)
    for dir in $dirs; do
        if [[ -d $to/dir ]]; then
            exec "rm -rf $to/$dir" # remove existing file at destination
        fi
        cp -r $dir $to/$dir # copy everything in dir to destination
    done
    popd
}

# Update config directory
update_files $DEV_ENV/env/.config $XDG_CONFIG_HOME
# Update .local directory
update_files $DEV_ENV/env/.local $HOME/.local

# Copy Individual Files
copy $DEV_ENV/env/.zshrc $HOME/.zshrc
copy $DEV_ENV/dev-env $HOME/.local/scripts/dev-env # this script

# Copy Directories
# copy_dir $DEV_ENV/env/.config $XDG_CONFIG_HOME
