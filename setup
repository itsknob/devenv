#!/usr/bin/env bash

# TODO: change to boolean for crying out loud; maybe make the variable name mean something?
# 1 is Dry, 0 is Wet
export dry_run="1"

# Where the config is going to be installed TO
if [ -z "$XDG_CONFIG_HOME" ]; then
    echo "no xdg config home"
    echo "using ~/.config as XDG_CONFIG_HOME"
    XDG_CONFIG_HOME=$HOME/.config
fi

# Where the config should be installed FROM
# At this point it should point to the root of this repo
# ~/code/devenv
# no trailing slash
if [ -z "$DEV_ENV" ]; then
    echo "env var DEV_ENV needs to be present"
    echo "export DEV_ENV=<path/to/source/dir (from directory)"
    exit 1
fi

if [[ $1 == "--real" ]]; then
    echo "[[ REAL RUN ]]"
    dry_run="0"
fi

log() {
    if [[ $dry_run == "1" ]]; then
        echo "[DRY_RUN]: $1"
    else
        echo "$1"
    fi
}
export -f log

log "//////////////////"
log "//// Setup"
log "/////////////"
log "// Moving dotfiles"
log "----------- $DEV_ENV -----------"

# ensure dev-env script is in $HOME/personal
if [[ $dry_run == "0" ]]; then
    cp ./dev-env ~/personal
else
    log "Copying dev-env script to ~/personal"
fi

## Ensure Stow is installed?
log "Stow"
log "  Checking for stow"
if ! hash stow; then
    log "    stow not found - installing"

    if [[ $dry_run == "0" ]]; then
        sudo apt install stow -y
    else
        log "  sudo apt install stow -y"
    fi
else
    log "  Found stow"
fi
## Should we run stow in here?
log "  Running stow"
if [[ $dry_run == "0" ]]; then
    log "    \`stow .local nvim tmux zsh\` disabled"
    # stow -d $DEV_ENV/env \
        #     -t $XDG_CONFIG_HOME \
        #     .local \
        #     nvim \
        #     tmux \
        #     zsh
else
    log "    stow simulating [DRY_RUN]"
    stow -nv \
        -d $DEV_ENV/env \
        -t $XDG_CONFIG_HOME \
        .local \
        nvim \
        tmux \
        zsh \
        --ignore .git
fi

if [[ $dry_run == "0" ]]; then
    log "  running ./run --real is disabled"
    # ./run --real
else
    ./run
fi

